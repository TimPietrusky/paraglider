extends _layout.pug

include _mixins.pug

block content
  h2 Preset: belt
  .glider.belt
    +pagers()
    +dots(2)
    +slides(2)
  pre.prettyprint.
    belt(element)

  h2 Preset: cover-left-right
  .glider.coverLeftRight
    +pagers()
    +dots(3)
    +slides(3)
  pre.prettyprint.
    coverLeftRight(element)

  h2 Preset: cover-right
  .glider.coverRight
    +pagers()
    +dots(4)
    +slides(4)
  pre.prettyprint.
    coverRight(element)

  h2 Preset: cover-left
  .glider.coverLeft
    +pagers()
    +dots(5)
    +slides(5)
  pre.prettyprint.
    coverLeft(element)

  h2 Preset: belt
  h3 With parallax
  .glider.ex1
    +pagers()
    +dots(6)
    +slides(6, true)
  pre.prettyprint.
    belt(element, {
      initialSlide: 3,
      onSlide({left, right}, next, prev, current) {
        parallaxItems.forEach(item => {
          if (item.parentNode === next) {
            item.style.transform = `translate3d(${-100 + (easeOutSine(right) * 100)}%,0,0)`
          } else if (item.parentNode === prev) {
            item.style.transform = `translate3d(${100 - (easeOutSine(left) * 100)}%,0,0)`
          } else if (item.parentNode === current) {
            item.style.transform = `translate3d(${(easeOutSine(right) * 100)}%,0,0)`
          }
        })
      },
      onEnd(next, prev, current) {
        parallaxItems.forEach(item => {
          if (item.parentNode === current) {
            item.style.transform = ''
          }
        })
      }
    })

  h2 Custom: cover-right with easing
  h3 With parallax
  .glider.ex2
    +pagers()
    +dots(7)
    +slides(7, true)
  pre.prettyprint.
    const coverRightCustom = (glider, opts) => wrapper(glider, {
      ...opts,
      onSlide({left, right}, next, prev, current) {
        if (prev) {
          prev.style.transform = `translate3d(${100 - (easeOutSine(left) * 100)}%,0,0)`
        } else if (next) {
          next.style.transform = `translate3d(${100 - (easeOutSine(right) * 100)}%,0,0)`
        }
        if (typeof opts.onSlide === 'function') {
          opts.onSlide({left, right}, next, prev, current)
        }
      },
      onEnd(next, prev, current) {
        if (typeof opts.onEnd === 'function') {
          opts.onEnd(next, prev, current)
        }
      }
    })

    coverRightCustom(element, {
      initialSlide: 2,
      speed: 600,
      spring: 300,
      onSlide({left, right}, next, prev, current) {
        parallaxItems.forEach(item => {
          if (item.parentNode === next) {
            item.style.transform = `translate3d(${100 - (easeInQuad(right) * 100)}%,0,0)`
          } else if (item.parentNode === prev) {
            item.style.transform = `translate3d(${100 - (easeOutQuad(left) * 100)}%,0,0)`
          }
        })
      },
      onEnd(next, prev, current) {
        parallaxItems.forEach(item => {
          if (item.parentNode === current) {
            item.style.transform = ''
          }
        })
      }
    })
  h2 Custom: cover
  h3 With parallax
  .glider.ex3
    +pagers()
    +dots(7)
    +slides(7, true)
